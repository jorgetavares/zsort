{"name":"zsort","body":"# Overview\r\nzsort is a collection of portable sorting algorithms. Common lisp provides the sort and stable-sort functions but these can have different algorithms implemented according to each implementation. Also, the standard sorting function might not be the best for a certain situation. This library aims to provide developers more options. Although for most situations the standard functions are more than enough, zsort could be a useful complement. \r\n\r\n\r\n# Sorting Algorithms\r\nThe following comparison based algorithms are implemented:\r\n+ insertion-sort\r\n+ quicksort \r\n+ randomized-quicksort\r\n+ merge-sort\r\n+ heapsort\r\n\r\nAt the moment, only one non-comparison algorithm is implemented:\r\n+ counting-sort\r\n\r\n\r\n# Install\r\nzsort is available via [Quicklisp](http://www.quicklisp.org) and that is the preferable method of installation. To use it, first load Quicklisp in your Common Lisp implementation and then evaluate `(ql:quickload \"zsort\")`\r\n\r\n\r\n# How to Use\r\nAll comparison sorts have the same syntax `(<sort> sequence predicate &key key)` and return a sorted sequence. All the functions sort destructively, i.e., keep a copy of the unsorted sequence if you wish to keep it. \r\n\r\nCounting sort only accepts sequences without key data and can be sorted in ascending or descending order, according to the value of the `:ascend` key (t for ascending and nil for descending). \r\n\r\nAlthough zsort accepts list sequences, the algorithms are expected to work on vectors/arrays. A specialized sort for lists will be included in the future.\r\n\r\n\r\n# Todo\r\nThe following is planned for zsort:\r\n+ More sorting algorithms, e.g., timsort, radix sort and bucket sort\r\n+ External sorting to handle large amounts of data\r\n+ Parallel implementations of some sorting algorithms\r\n\r\n\r\n# License\r\nzsort is available under an MIT-style license. See the LICENSE file.","tagline":"portable sorting algorithms in Common Lisp","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}